name: Deploy Static Website

on:
  # schedule:
  #   - cron: '*/2 * * * *'
  #   # - cron: '10 15 11 7 *'
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
    types: [opened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Deployment action'
        required: true
        default: content
        type: choice
        options:
          - infra
          - content

concurrency:
  # Unique group for each workflow + branch + environment + action
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment }}-${{ github.event.inputs.action}}
  cancel-in-progress: true # Cancel any in-progress runs for this group

env:
  AWS_DEFAULT_REGION: us-east-1
  DEFAULT_ACTION: content # Default action for triggers other than workflow_dispatch
  DEFAULT_ENVIRONMENT: dev # Default environment for triggers other than workflow_dispatch

jobs:
  # Deploy to development environment
  deploy-dev:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write
      pull-requests: write
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'pull_request' && github.head_ref == 'develop') ||
      (
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.environment == 'dev' &&
        contains(fromJSON('["infra", "content"]'), github.event.inputs.action)
      )
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Environment
        uses: ./.github/actions/log-env

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-dev
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to development
        run: |
          action="${{ github.event.inputs.action || env.DEFAULT_ACTION }}"
          ./scripts/deploy.sh $action dev

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            try {
              const output = execSync('./scripts/deploy.sh outputs dev', { encoding: 'utf8' });
              console.log('outputs:\n', output);

              const websiteUrl = output.match(/Website URL: (https?:\/\/[^\s]+)/);
              console.log('websiteUrl:', websiteUrl);

              if (websiteUrl) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `ðŸš€ **Development Environment Deployed**\n\n**Website URL:** ${websiteUrl[1]}\n\n*This deployment is automatically updated with each push to this PR.*`
                });
              }
            } catch (error) {
              console.log('Could not get deployment info:', error.message);
            }

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.environment == 'staging' &&
        contains(fromJSON('["infra", "content"]'), github.event.inputs.action)
      )
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Environment
        uses: ./.github/actions/log-env

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-staging
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to staging
        run: |
          action="${{ github.event.inputs.action || env.DEFAULT_ACTION }}"
          ./scripts/deploy.sh $action staging

  # Deploy to production environment
  deploy-prod:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    # needs: [validate, deploy-staging]
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'prod' &&
      contains(fromJSON('["infra", "content"]'), github.event.inputs.action)
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log Environment
        uses: ./.github/actions/log-env

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-production
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy to production
        run: |
          action="${{ github.event.inputs.action || env.DEFAULT_ACTION }}"
          ./scripts/deploy.sh $action prod

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ github.run_number }}
          name: Production Release ${{ github.run_number }}
          body: |
            ðŸš€ **Production Deployment**

            **Commit:** ${{ github.sha }}
            **Deployed by:** ${{ github.actor }}
            **Workflow:** ${{ github.workflow }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

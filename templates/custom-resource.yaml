AWSTemplateFormatVersion: '2010-09-09'
Description: ACFS3 - Cert Provider with DNS validation
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project/application
    AllowedPattern: ^[a-z0-9\-]{3,20}$
  Environment:
    Type: String
    Description: 'Environment name'
    AllowedValues:
      - dev
      - staging
      - prod

Resources:
  CopyCustomResource:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CopyFunction.Arn 
      ServiceTimeout: 30
      PhysicalResourceId: !Sub '${ProjectName}-${Environment}-copy-custom-resource'

  S3BucketLogs:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-logs-${AWS::AccountId}-${AWS::Region}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Solution
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  S3BucketRoot:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-root-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketLogs'
        LogFilePrefix: 'origin/'
      Tags:
        - Key: Solution
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  CopyLayerVersion:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: !Sub '${ProjectName}-${Environment}-copy-layer'
      ContentUri: ../witch.zip
      CompatibleRuntimes:
        - nodejs20.x

  CopyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3CopyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub
                    - arn:aws:s3:::${TargetBucket}/*
                    - TargetBucket: !Ref S3BucketRoot
                  - !Sub
                    - arn:aws:s3:::${TargetBucket}
                    - TargetBucket: !Ref S3BucketRoot

  CopyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-copy-function'
      CodeUri: ../www
      Environment:
        Variables:
          BUCKET: !Ref S3BucketRoot
      Handler: witch.staticHandler
      Layers:
        - !Ref CopyLayerVersion
      Role: !GetAtt CopyRole.Arn
      Runtime: nodejs20.x
      Timeout: 300
      ReservedConcurrentExecutions: 5  # Limits to 5 concurrent executions
      Tags:
        Solution: !Ref ProjectName
        Environment: !Ref Environment


Outputs:
  S3BucketRoot:
    Description: Website bucket
    Value: !Ref S3BucketRoot
  S3BucketRootName:
    Description: Website bucket name
    Value: !GetAtt S3BucketRoot.DomainName
  S3BucketRootArn:
    Description: Website bucket locator
    Value: !GetAtt S3BucketRoot.Arn
  S3BucketLogs:
    Description: Logging bucket
    Value: !Ref S3BucketLogs
  S3BucketLogsName:
    Description: Logging bucket Name
    Value: !GetAtt S3BucketLogs.DomainName
  CopyFunction:
    Description: S3 helper function
    Value: !GetAtt CopyFunction.Arn
